__author__ = 'Giovanni'
import ConvReluLayer
import numpy as np
import cPickle
import os


#fLoaded = file('E:\\My Documents\\BUAP\\Titulacion\\Tesis\\Resources\\Data Sets\\CASIA Processing\\Results\\CASIAFULL_0.pkl', 'rb')
#setloaded = cPickle.load(fLoaded)
#fLoaded.close()

a = xrange(45)
for item in a:
    print item


inputTest=np.array([[[[  2.87173394e-03,   5.74791489e-03,  -4.96293175e-03,
            7.12453776e-03,  -9.99887341e-03,   9.29196571e-03,
           -5.08244554e-03,   1.32072032e-02,   1.65764127e-02,
            1.37472991e-02],
         [ -3.11162203e-03,  -5.89006873e-03,  -1.02190662e-03,
           -4.84494281e-03,   7.80957044e-03,   7.38706915e-03,
           -2.00884029e-03,  -1.21634587e-02,  -2.05673772e-03,
           -6.86824657e-04],
         [ -1.67189221e-02,  -3.19571610e-03,  -1.97258025e-02,
           -9.95635885e-03,   7.07010718e-04,   1.67350192e-02,
            2.66782238e-02,   7.56775148e-03,  -3.70561660e-03,
           -6.05855553e-03],
         [ -1.73514977e-04,   5.63252533e-03,   5.49660528e-04,
            4.62783610e-03,   4.70119175e-03,  -3.19177093e-03,
           -5.84519255e-03,  -2.31453189e-03,  -7.14979651e-03,
           -1.95168073e-03],
         [  1.69138411e-02,  -5.25703574e-03,  -1.14489943e-03,
           -1.39549297e-02,   1.16221055e-03,   2.41339343e-02,
            5.55052253e-03,   9.64678022e-04,   2.89983870e-03,
            5.69570833e-03],
         [ -3.09934869e-03,   3.92019944e-03,  -9.17778356e-03,
            3.57616638e-03,   6.02597322e-04,  -7.57197637e-03,
           -4.90601029e-03,   2.66837330e-03,  -9.29631669e-03,
           -1.87904713e-02],
         [  1.00759947e-02,   8.71859431e-03,  -6.61869942e-03,
           -3.08620351e-03,   1.00926562e-02,   1.09596965e-02,
           -1.10846750e-03,   5.27169496e-03,   1.83100550e-02,
            1.41926223e-02],
         [  1.42598532e-02,   1.64825035e-02,   7.33103933e-04,
           -2.04956155e-02,  -1.17328804e-02,   9.10675768e-03,
            2.58305751e-03,  -2.38103404e-02,  -7.37196952e-03,
           -2.15096343e-03],
         [  1.05518506e-02,  -3.67684328e-03,  -5.98854797e-03,
            2.63375144e-03,  -6.66194465e-03,  -3.72840672e-03,
           -1.53842894e-02,  -1.88882252e-03,  -1.85635258e-02,
            1.03091040e-02],
         [  3.03760811e-03,   2.85633738e-03,   7.68145933e-04,
           -1.70852599e-02,  -7.76431824e-03,   5.10753777e-03,
            1.78658497e-02,  -1.06166958e-02,   2.92051713e-02,
            3.45496186e-03]]],
       [[[  5.90598606e-03,   6.16559357e-03,   5.30344373e-04,
           -3.77416115e-03,  -5.66005420e-03,  -2.44997792e-03,
            3.37531901e-03,  -3.45658146e-03,  -2.27835887e-03,
            7.30318047e-03],
         [ -1.62169392e-02,  -1.28092181e-02,   2.27604062e-03,
           -5.09662964e-03,  -7.35872806e-03,   1.45374917e-02,
           -7.04354071e-03,   7.08515729e-03,   2.57548077e-03,
            6.54274989e-03],
         [ -1.92912918e-02,   6.52885045e-03,  -2.31722633e-02,
            1.04433641e-02,  -1.19199215e-02,  -5.61837955e-03,
           -6.68717047e-03,   7.74810146e-03,   8.33073075e-03,
            4.95335440e-03],
         [ -1.31987981e-02,  -5.03437437e-03,   6.14492611e-03,
           -8.37002051e-03,   1.46187050e-02,  -8.17729232e-03,
           -3.86160510e-03,   4.76977568e-03,   1.13069128e-02,
            1.53243807e-03],
         [  2.00645748e-02,  -3.48476770e-03,   2.16331787e-02,
            1.49150594e-03,  -3.63150451e-03,   2.25195867e-02,
           -5.62737191e-03,  -1.07091830e-02,   6.10569171e-03,
           -2.20206806e-02],
         [ -1.03779565e-02,  -1.72426872e-02,   2.12334147e-02,
           -1.31272177e-03,  -5.46872222e-03,  -6.59019394e-03,
           -4.24526159e-03,   3.85268537e-03,  -5.36831347e-03,
           -1.75431152e-02],
         [ -1.06509750e-02,  -2.25595564e-03,   2.45948470e-03,
            5.73408300e-03,  -3.77875615e-03,   1.55437747e-02,
            1.41368750e-02,   1.76525475e-02,  -5.31765958e-03,
           -3.00567838e-04],
         [  1.56851048e-02,  -1.39894827e-02,  -3.42120153e-03,
           -1.51246633e-03,   6.14059139e-03,  -7.13666055e-03,
            3.54096140e-05,  -1.80774437e-02,  -1.36496858e-02,
           -4.12572712e-03],
         [ -2.41122050e-03,  -2.37578673e-03,  -2.45318363e-05,
           -6.08373290e-03,   4.88325394e-03,   1.07341881e-03,
           -5.96188951e-03,   2.20482834e-02,   2.16385778e-02,
           -2.01089754e-03],
         [  1.03382703e-02,  -7.01624044e-03,   9.20451363e-04,
           -1.55689431e-02,   9.10351032e-03,   3.40976534e-02,
            1.24136669e-03,   8.64246233e-05,  -6.66911953e-03,
           -2.43751186e-03]]]], dtype=theano.config.floatX)

#Ejemplo CS STANFORD
# w x h x depthinputLayer * No de kernels = 3 x 3 x 3 x 2
layer0 = ConvReluLayer(
    input=inputTest,
    image_shape=(2, 3, 10, 10),
    filter_shape=(2, 3, 3, 3),
)

print layer0.normalDistributionValues

print "Wow"
